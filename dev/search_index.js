var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [GPDiffEq]","category":"page"},{"location":"api/#GPDiffEq.DerivativeGP","page":"API","title":"GPDiffEq.DerivativeGP","text":"DerivativeGP\n\nThe Gaussian Process (GP) \n\n\n\n\n\n","category":"type"},{"location":"api/#GPDiffEq.GPODE","page":"API","title":"GPDiffEq.GPODE","text":"Defines an ODE model with a GP vector field. The returned model can be evaluated for an initial value as input.\n\n    GPODE(model, tspan, args...; kwargs...)\n\nArguments:\n\nmodel: An AbstractGP.FiniteGP\ntspan: The time span for the ODE solver\nargs: Additional positional arguments from DifferentialEquations.jl\nkwargs: Additional keyword arguments from DifferentialEquations.jl\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractGPs.posterior-Tuple{AbstractGPs.FiniteGP{<:AbstractGPs.PosteriorGP{<:DerivativeGP}}, AbstractVector{<:Real}}","page":"API","title":"AbstractGPs.posterior","text":"posterior(fx::FiniteGP{<:PosteriorGP}, y::AbstractVector{<:Real})\n\nConstruct the posterior distribution over fx.f when f is itself a PosteriorGP by updating the Cholesky factorisation of the covariance matrix and avoiding recomputing it from the original covariance matrix. It does this by using update_chol functionality. Other aspects are similar to a regular posterior.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractGPs.posterior-Tuple{AbstractGPs.FiniteGP{<:DerivativeGP}, AbstractVector{<:Real}}","page":"API","title":"AbstractGPs.posterior","text":"posterior(FiniteGP{<:DerivativeGP}, y::AbstractVector{<:Real})\n\nThe posterior of a derivative GP, conditioned on the data y from the output space of the undifferentiated GP. Evaluating this posterior at a point x will return the posterior of the derivative at x, and therefore not return the original data y.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPDiffEq.differentiate-Tuple{AbstractGPs.PosteriorGP}","page":"API","title":"GPDiffEq.differentiate","text":"differentiate(gpp::PosteriorGP)\n\n\n\n\n\n","category":"method"},{"location":"api/#GPDiffEq.gp_negloglikelihood-Tuple{Any, Any, Any}","page":"API","title":"GPDiffEq.gp_negloglikelihood","text":"Returns two function function. 1) to compute the loglikelihood and 2) rebuild the GP from a new set of parameters.\n\n    gp_negloglikelihood(gp, x, y)\n\nArguments:\n\ngp: An AbstractGP.FiniteGP\nx: input data\ny: output data\n\n\n\n\n\n","category":"method"},{"location":"api/#GPDiffEq.gp_train","page":"API","title":"GPDiffEq.gp_train","text":"Simplified copy of sciml_train\n\ngp_train(loss, θ, opt=ADAGrad(0.5), adtype=Optimization.AutoZygote(), args...;\nlower_bounds=nothing, upper_bounds=nothing, maxiters=1000, kwargs...,)\n\n\n\n\n\n","category":"function"},{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"This packages uses GPs to learn the vector field of unknown dynamical systems. The rationale is that for many systems, the vector field is substantially simpler than the flow map (see e.g. emergence)","category":"page"},{"location":"theory/#Modelling-choices","page":"Theory","title":"Modelling choices","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"While GP models are sometimes referred to as non-parametric, there are some modelling choices that need to be made. ","category":"page"},{"location":"theory/#Kernel","page":"Theory","title":"Kernel","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"GPs represent a distribution over a function space, constrained by the available data points. The choice of kernel determines the Reproducing Kernel Hilbert Space (RKHS) underpinning the distribution, and therefore influences the accuracy of the model uncertainty behaviour. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"This package uses KernelFunction.jl, which means that all kernels implemented there are available. ","category":"page"},{"location":"theory/#Inducing-Points","page":"Theory","title":"Inducing Points","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"To limit the computational cost, we use inducing points by default. Various methods to select inducing points can be found in the InducingPoints.jl package.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"","category":"page"},{"location":"quickstart/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quickstart/#Setup","page":"Quick Start","title":"Setup","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"First we define an ODE and generate some data points from it. ","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"EditURL = \"https://github.com/Crown421/GPDiffEq.jl/blob/main/examples/derivativegp/script.jl\"","category":"page"},{"location":"examples/derivativegp/#Derivative-of-a-GP","page":"Derivative of a GP","title":"Derivative of a GP","text":"","category":"section"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"(Image: )","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"The derivative of a GP is also a GP, as differentiation is a linear operators. In this example, we show how to use of the DerivativeGP and how to easily generate it from a known GP.","category":"page"},{"location":"examples/derivativegp/#Setup","page":"Derivative of a GP","title":"Setup","text":"","category":"section"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"using GPDiffEq\nusing Plots","category":"page"},{"location":"examples/derivativegp/#The-toy-model","page":"Derivative of a GP","title":"The toy model","text":"","category":"section"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"We generate data for our model","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"σ_n = 3e-2\nx = collect(range(-3, 3; length=10))\ny = sin.(x) + σ_n * randn(length(x))","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"10-element Vector{Float64}:\n -0.15244763758720706\n -0.7025527085849355\n -1.0107733140989505\n -0.9056570116205025\n -0.360757392343622\n  0.34945119599372465\n  0.8524056342632401\n  1.013084110461819\n  0.7540054515488241\n  0.18639997177504775","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"which looks as follows","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"x_plot = collect(range(-3, 3; length=50))\n\nplot(x_plot, sin.(x_plot); label=\"true\", linewidth=2.5)\nscatter!(x, y; label=\"data\", markersize=5)\n\n# Define a GP","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"(Image: )","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"We'll use a simple GP with a ZeroMean and GaussianKernel, condition it on our data","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"kernel = GaussianKernel()\nf = GP(kernel)\nfx = f(x, σ_n^2)\n\nf_post = posterior(fx, y)","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"AbstractGPs.PosteriorGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, NamedTuple{(:α, :C, :x, :δ), Tuple{Vector{Float64}, LinearAlgebra.Cholesky{Float64, Matrix{Float64}}, Vector{Float64}, Vector{Float64}}}}(AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(AbstractGPs.ZeroMean{Float64}(), Squared Exponential Kernel (metric = Distances.Euclidean(0.0))), (α = [1.194061133835321, -2.1284029353962417, 1.406157967452579, -1.6956189732773288, 0.23203224195583938, 0.34668391887049094, 0.39704636292650597, -0.3207523229091308, 1.6563173758113094, -1.0710367761544373], C = LinearAlgebra.Cholesky{Float64, Matrix{Float64}}([1.0004498987955368 0.8003773141272065 0.4109274147582345 0.13527442343644172 0.028552654979465738 0.0038641816488032754 0.0003353117715403665 1.8656075767503327e-5 6.655367228157499e-7 1.5223130876467006e-8; 0.8007374029168073 0.6002467451228027 0.7860774360298166 0.5045287013510821 0.18739357913541801 0.042437043869301076 0.005993442252878988 0.0005339982776949294 3.0207225222272073e-5 1.0889719997540142e-6; 0.4111122905071873 0.800737402916808 0.4627320221952479 0.7532454836302187 0.5447501912681774 0.21694755843305388 0.05125299553180774 0.0074308448185643515 0.0006730546137433022 3.8471936975043666e-5; 0.1353352832366127 0.4111122905071873 0.800737402916808 0.4008401941766902 0.7284671118734966 0.5632271754070077 0.23365913510519642 0.05662183999427727 0.008341514642992735 0.0007632276968352209; 0.028565500784550377 0.13533528323661262 0.41111229050718734 0.8007374029168081 0.3708790752043206 0.7123614154783097 0.5712010291281239 0.242503787177178 0.059633063470279454 0.008867504227890321; 0.0038659201394728076 0.028565500784550366 0.1353352832366127 0.41111229050718745 0.8007374029168081 0.3568392984503521 0.7029993719303738 0.5740291337269634 0.24663628796656215 0.06112098575317586; 0.00033546262790251185 0.003865920139472804 0.028565500784550366 0.1353352832366127 0.41111229050718745 0.8007374029168081 0.3509441161144569 0.6982952225737459 0.5746810106111326 0.24824985985472933; 1.866446911352057e-5 0.00033546262790251185 0.003865920139472804 0.028565500784550366 0.1353352832366127 0.41111229050718734 0.800737402916808 0.3488620260888474 0.6963366393076491 0.5746726576516153; 6.658361469857302e-7 1.8664469113520537e-5 0.00033546262790251185 0.003865920139472804 0.028565500784550366 0.13533528323661262 0.4111122905071873 0.800737402916808 0.3482835414112316 0.6956902200185071; 1.522997974471263e-8 6.658361469857302e-7 1.866446911352057e-5 0.00033546262790251185 0.0038659201394728076 0.028565500784550377 0.1353352832366127 0.4111122905071873 0.8007374029168073 0.3481716098016506], 'U', 0), x = [-3.0, -2.3333333333333335, -1.6666666666666667, -1.0, -0.3333333333333333, 0.3333333333333333, 1.0, 1.6666666666666667, 2.3333333333333335, 3.0], δ = [-0.15244763758720706, -0.7025527085849355, -1.0107733140989505, -0.9056570116205025, -0.360757392343622, 0.34945119599372465, 0.8524056342632401, 1.013084110461819, 0.7540054515488241, 0.18639997177504775]))","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"and plot the posterior. Note that this GP completely untrained, no hyperparameters have been defined.","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"plot(x_plot, sin.(x_plot); label=\"true\", linewidth=2.5)\nscatter!(x, y; label=\"data\", markersize=5)\nplot!(\n    x_plot,\n    mean(f_post, x_plot);\n    ribbons=sqrt.(var(f_post, x_plot)),\n    label=\"GP\",\n    linewidth=2.5,\n)","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"(Image: )","category":"page"},{"location":"examples/derivativegp/#Derivative-of-a-GP-2","page":"Derivative of a GP","title":"Derivative of a GP","text":"","category":"section"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"Now we can very easily generate the derivate of this GP","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"df_post = differentiate(f_post)","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"AbstractGPs.PosteriorGP{GPDiffEq.DerivativeGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, AbstractGPs.ZeroMean{Float64}, GPDiffEq.DerivativeKernelCollection{KernelFunctions.SqExponentialKernel{Distances.Euclidean}, GPDiffEq.FirstComponentDerivativeKernel{GPDiffEq.var\"#d10#12\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, GPDiffEq.SecondComponentDerivativeKernel{GPDiffEq.var\"#d01#15\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, GPDiffEq.BothComponentDerivativeKernel{GPDiffEq.var\"#d11#18\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}}}, NamedTuple{(:α, :C, :x, :δ), Tuple{Vector{Float64}, LinearAlgebra.Cholesky{Float64, Matrix{Float64}}, Vector{Float64}, Vector{Float64}}}}(GPDiffEq.DerivativeGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, AbstractGPs.ZeroMean{Float64}, GPDiffEq.DerivativeKernelCollection{KernelFunctions.SqExponentialKernel{Distances.Euclidean}, GPDiffEq.FirstComponentDerivativeKernel{GPDiffEq.var\"#d10#12\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, GPDiffEq.SecondComponentDerivativeKernel{GPDiffEq.var\"#d01#15\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, GPDiffEq.BothComponentDerivativeKernel{GPDiffEq.var\"#d11#18\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}}}(AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(AbstractGPs.ZeroMean{Float64}(), Squared Exponential Kernel (metric = Distances.Euclidean(0.0))), AbstractGPs.ZeroMean{Float64}(), GPDiffEq.DerivativeKernelCollection{KernelFunctions.SqExponentialKernel{Distances.Euclidean}, GPDiffEq.FirstComponentDerivativeKernel{GPDiffEq.var\"#d10#12\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, GPDiffEq.SecondComponentDerivativeKernel{GPDiffEq.var\"#d01#15\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, GPDiffEq.BothComponentDerivativeKernel{GPDiffEq.var\"#d11#18\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}}(GPDiffEq.FirstComponentDerivativeKernel{GPDiffEq.var\"#d10#12\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(GPDiffEq.var\"#d10#12\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(Squared Exponential Kernel (metric = Distances.Euclidean(0.0)))), GPDiffEq.SecondComponentDerivativeKernel{GPDiffEq.var\"#d01#15\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(GPDiffEq.var\"#d01#15\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(Squared Exponential Kernel (metric = Distances.Euclidean(0.0)))), GPDiffEq.BothComponentDerivativeKernel{GPDiffEq.var\"#d11#18\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(GPDiffEq.var\"#d11#18\"{KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(Squared Exponential Kernel (metric = Distances.Euclidean(0.0)))))), (α = [1.194061133835321, -2.1284029353962417, 1.406157967452579, -1.6956189732773288, 0.23203224195583938, 0.34668391887049094, 0.39704636292650597, -0.3207523229091308, 1.6563173758113094, -1.0710367761544373], C = LinearAlgebra.Cholesky{Float64, Matrix{Float64}}([1.0004498987955368 0.8003773141272065 0.4109274147582345 0.13527442343644172 0.028552654979465738 0.0038641816488032754 0.0003353117715403665 1.8656075767503327e-5 6.655367228157499e-7 1.5223130876467006e-8; 0.8007374029168073 0.6002467451228027 0.7860774360298166 0.5045287013510821 0.18739357913541801 0.042437043869301076 0.005993442252878988 0.0005339982776949294 3.0207225222272073e-5 1.0889719997540142e-6; 0.4111122905071873 0.800737402916808 0.4627320221952479 0.7532454836302187 0.5447501912681774 0.21694755843305388 0.05125299553180774 0.0074308448185643515 0.0006730546137433022 3.8471936975043666e-5; 0.1353352832366127 0.4111122905071873 0.800737402916808 0.4008401941766902 0.7284671118734966 0.5632271754070077 0.23365913510519642 0.05662183999427727 0.008341514642992735 0.0007632276968352209; 0.028565500784550377 0.13533528323661262 0.41111229050718734 0.8007374029168081 0.3708790752043206 0.7123614154783097 0.5712010291281239 0.242503787177178 0.059633063470279454 0.008867504227890321; 0.0038659201394728076 0.028565500784550366 0.1353352832366127 0.41111229050718745 0.8007374029168081 0.3568392984503521 0.7029993719303738 0.5740291337269634 0.24663628796656215 0.06112098575317586; 0.00033546262790251185 0.003865920139472804 0.028565500784550366 0.1353352832366127 0.41111229050718745 0.8007374029168081 0.3509441161144569 0.6982952225737459 0.5746810106111326 0.24824985985472933; 1.866446911352057e-5 0.00033546262790251185 0.003865920139472804 0.028565500784550366 0.1353352832366127 0.41111229050718734 0.800737402916808 0.3488620260888474 0.6963366393076491 0.5746726576516153; 6.658361469857302e-7 1.8664469113520537e-5 0.00033546262790251185 0.003865920139472804 0.028565500784550366 0.13533528323661262 0.4111122905071873 0.800737402916808 0.3482835414112316 0.6956902200185071; 1.522997974471263e-8 6.658361469857302e-7 1.866446911352057e-5 0.00033546262790251185 0.0038659201394728076 0.028565500784550377 0.1353352832366127 0.4111122905071873 0.8007374029168073 0.3481716098016506], 'U', 0), x = [-3.0, -2.3333333333333335, -1.6666666666666667, -1.0, -0.3333333333333333, 0.3333333333333333, 1.0, 1.6666666666666667, 2.3333333333333335, 3.0], δ = [-0.15244763758720706, -0.7025527085849355, -1.0107733140989505, -0.9056570116205025, -0.360757392343622, 0.34945119599372465, 0.8524056342632401, 1.013084110461819, 0.7540054515488241, 0.18639997177504775]))","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"and plot the new posterior. As we know, the derivative of sin is cos, so we can check the differentiated GP.","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"plot(x_plot, cos.(x_plot); label=\"true\", linewidth=2.5)\nplot!(\n    x_plot,\n    mean(df_post, x_plot);\n    ribbons=sqrt.(var(df_post, x_plot)),\n    label=\"GP\",\n    linewidth=2.5,\n)","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"(Image: )","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"As we saw above, the original GP was slighly off from the true function. This is reflected and amplified in the derivative as well.","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"","category":"page"},{"location":"examples/derivativegp/","page":"Derivative of a GP","title":"Derivative of a GP","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#GPDiffEq.jl","page":"Home","title":"GPDiffEq.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The GPDiffEq.jl package facilitates learning the (nonlinear) vector field of unknown system using Gaussian Processes (GPs). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"It bridges the Universal Differential Equations in the SciML community using Neural Networks and GP ecosystem by the JuliaGaussianProcesses organization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the GP machinery, this package builds on ","category":"page"},{"location":"","page":"Home","title":"Home","text":"KernelFunctions.jl\nApproximateGPs.jl\nInducingPoints.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It further uses Flux.jl for training, and DifferentialEquations.jl for solvers. ","category":"page"},{"location":"symmetries/#Symmetries","page":"Symmetries","title":"Symmetries","text":"","category":"section"},{"location":"symmetries/","page":"Symmetries","title":"Symmetries","text":"In addition to the kernels from KernelFunctions, we implement Group-Integration-Matrix (GIM) Kernels. ","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"EditURL = \"https://github.com/Crown421/GPDiffEq.jl/blob/main/examples/spiral/script.jl\"","category":"page"},{"location":"examples/spiral/#Spiral-ODE","page":"Spiral ODE","title":"Spiral ODE","text":"","category":"section"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/spiral/#Setup","page":"Spiral ODE","title":"Setup","text":"","category":"section"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Load necessary packages","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"using ApproximateGPs\nusing Plots\nusing LinearAlgebra\nusing DifferentialEquations\nusing InducingPoints\nusing GPDiffEq\nusing Optimization, OptimizationOptimJL","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"First we define an ODE and generate some data points from it.","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"u0 = [2.0; 0.0]\ndatasize = 20\ntspan = (0.0, 3.0)\ndatatspan = (0.0, 1.5)\ndatatsteps = range(datatspan[1], datatspan[2]; length=datasize)\n\nfunction trueODEfunc(u, p, t)\n    du = similar(u)\n    true_A = [-0.1 2.0; -2.0 -0.1]\n    return du .= ((u .^ 3)'true_A)'\nend\n\nprob_trueode = ODEProblem(trueODEfunc, u0, tspan)\nsol = solve(prob_trueode, Tsit5())\node_data = Array(sol(datatsteps))\n\ntraj = sol(datatsteps);\n\np = plot(sol)\nscatter!(p, datatsteps, ode_data[1, :]; markersize=4)#, markerstyle = :star)\nscatter!(p, datatsteps, ode_data[2, :]; m=(4, :pentagon), lab=\"pentagon\")#, markerstyle = :star)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/#Gradient-data","page":"Spiral ODE","title":"Gradient data","text":"","category":"section"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"For this example we get gradient observations from our trajectory data via finite differences","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"First, we set all necessary variables","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"scaker = with_lengthscale(SqExponentialKernel(), 1.0)\nmoker = IndependentMOKernel(scaker)\n##ToDo: make ODE data into col_vecs and add number programmatically\nx = MOInput(datatsteps, 2)\nσ_n = 1e-6\ny = ode_data'[:]","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"and build a finite GP from them","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"g = GP(moker)\ngt = g(x, σ_n)\ngt_post = posterior(gt, y)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Now we use the following convenience functions to a loglikelihood loss function and a function to rebuild the gp with the optimal parameters. Note that we use optimize over the logarithm of the parameters, to ensure their positivity. For more details see this KernelFunctions.jl example","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"loss, buildgppost = gp_negloglikelihood(gt, x, y)\n\np0 = log.([1.0])\nunfl(x) = exp.(x)\n\n#optp = gp_train(loss ∘ unfl, p0; show_trace=true, show_every=15)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"unfl (generic function with 1 method)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Optimizing:","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"adtype = Optimization.AutoZygote()\n\noptf = Optimization.OptimizationFunction((x, p) -> (loss ∘ unfl)(x), adtype)\noptprob = Optimization.OptimizationProblem(optf, p0)\n\noptp = Optimization.solve(optprob, NelderMead(); maxiters=300)\n\noptparams = unfl(optp)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"1-element Vector{Float64}:\n 7.268328510367432","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Now we can build a FiniteGP with the optimized parameters,","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"optpost = buildgppost(optparams)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"which fits pretty well","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"t_plot = range(datatspan...; length=100)\nt_plot_mo = MOInput(t_plot, 2)\nopt_pred_mean = mean(optpost, t_plot_mo)\nopt_pred_mean = reshape(opt_pred_mean, :, 2)\npred_mean = mean(gt_post, t_plot_mo)\npred_mean = reshape(pred_mean, :, 2)\n# pred_cov = diag(cov(optpost, t_plot_mo))\n# pred_cov = reshape(pred_cov, :, 2)\n# plot!(t_plot, pred_mean; ribbons = pred_cov)\nplot(sol(t_plot); label=[\"ode\" \"\"], color=[:skyblue :navy], linewidth=3.5)\nplot!(\n    t_plot,\n    pred_mean;\n    label=[\"gp\" \"\"],\n    color=[:limegreen :darkgreen],\n    linewidth=2.5,\n    linestyle=:dashdot,\n)\nplot!(\n    t_plot,\n    opt_pred_mean;\n    label=[\"opt. gp\" \"\"],\n    color=[:tomato :firebrick],\n    linewidth=2.5,\n    linestyle=:dash,\n)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"GPs are closed under linear operators, which means that we can very easily obtain derivative information:","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"deriv_post = differentiate(optpost)\ndu_pred_mean = mean(deriv_post, x)\ndu_pred_mean = reshape(du_pred_mean, :, 2)\ndu_pred_mean = du_pred_mean ./ norm.(eachrow(du_pred_mean))\n\ndu = trueODEfunc.(eachcol(ode_data), 0, 0)\ndu = du ./ maximum(norm.(du))\nquiver(ode_data[1, :], ode_data[2, :]; quiver=(getindex.(du, 1), getindex.(du, 2)))\nquiver!(ode_data[1, :], ode_data[2, :]; quiver=(du_pred_mean[:, 1], du_pred_mean[:, 2]))","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"This leaves us with u and udot pairs as in the input and output:","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"u = ColVecs(ode_data)\nudot = ColVecs(du_pred_mean')","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"20-element KernelFunctions.ColVecs{Float64, LinearAlgebra.Adjoint{Float64, Matrix{Float64}}, SubArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Matrix{Float64}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, false}}:\n [-0.03165347046698772, 0.9994989033547739]\n [-0.3131227464619143, 0.9497126647824319]\n [-0.9679245733258961, 0.251240960736664]\n [-0.9981774178119854, -0.06034768073585721]\n [-0.9925599672581026, -0.12175677146095097]\n [-0.6642477894990115, -0.7475124575187205]\n [-0.03420468135829994, -0.9994148486855582]\n [0.045374704086262395, -0.9989700377033758]\n [0.1533555686837154, -0.9881710730200991]\n [0.6865910743527178, -0.7270438065338158]\n [0.9917640001668678, -0.1280787569154741]\n [0.9987723387326086, 0.04953600087406405]\n [0.9983241843164803, 0.057869015965663614]\n [0.9626976689863879, 0.2705793749127511]\n [0.6273635437792426, 0.7787265142119859]\n [0.1154155588390388, 0.9933172951166572]\n [-0.03179474807481451, 0.9994944191914525]\n [-0.06279683463643287, 0.9980263310953498]\n [-0.10676913637339373, 0.9942838385079382]\n [-0.5438482382019165, 0.8391835876640293]","category":"page"},{"location":"examples/spiral/#Building-a-model","page":"Spiral ODE","title":"Building a model","text":"","category":"section"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Now we build a model for the the ODE.","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"scaker = with_lengthscale(SqExponentialKernel(), ones(2))\nmoker = IndependentMOKernel(scaker)\n\nu_mo = MOInput(u, 2)\nσ_n = 1e-6\ny = reduce(vcat, udot.X)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"and build a posterior GP","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"gpmodel = GP(moker)\nfin_gpmodel = gpmodel(u_mo, σ_n)\npost_gpmodel = posterior(fin_gpmodel, y)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"AbstractGPs.PosteriorGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.IndependentMOKernel{KernelFunctions.TransformedKernel{KernelFunctions.SqExponentialKernel{Distances.Euclidean}, KernelFunctions.ARDTransform{Vector{Float64}}}}}, NamedTuple{(:α, :C, :x, :δ), Tuple{Vector{Float64}, LinearAlgebra.Cholesky{Float64, Matrix{Float64}}, KernelFunctions.MOInputIsotopicByOutputs{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, KernelFunctions.ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Int64}, Vector{Float64}}}}(AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.IndependentMOKernel{KernelFunctions.TransformedKernel{KernelFunctions.SqExponentialKernel{Distances.Euclidean}, KernelFunctions.ARDTransform{Vector{Float64}}}}}(AbstractGPs.ZeroMean{Float64}(), Independent Multi-Output Kernel\n\tSquared Exponential Kernel (metric = Distances.Euclidean(0.0))\n\t- ARD Transform (dims: 2)), (α = [53.50455982211798, -379.9364005747268, 347.4231781324362, 45.82685544593709, -24.087866709024226, 16.587648456477808, 4.7214045831247775, -46.812092326089534, 154.01348555865272, -399.1773674515109, 872.2545086314801, -1664.652447181485, 2784.600839946311, -4313.540249005141, 6536.115091132402, -9476.020376201013, 12373.257942434724, -12960.850779318162, 9395.768306678747, -3323.5269120297035, -55.17034749194778, 377.5148632623454, -340.73809754964293, -33.95213545796888, 5.498410781219144, 18.21492395088697, -63.21947643515656, 141.87295895553962, -304.0784204407977, 625.423743817468, -1174.580243349298, 2032.6969167225907, -3176.452159677253, 4667.008699757055, -6799.862670339678, 9608.950955585782, -12353.097116901768, 12817.354904150321, -9226.973513540877, 3241.7859142548273], C = LinearAlgebra.Cholesky{Float64, Matrix{Float64}}([1.000000499999875 0.4954890097390399 0.13993834623708593 0.03530424134314175 0.00444576739272158 0.0007560986595125537 0.0007509268990312181 0.001093377520541939 0.0010029710830390041 0.0012604227250751637 0.004673259185560229 0.022892467481398317 0.07722260972802414 0.18355091218552266 0.36409817560599433 0.6199106031869643 0.8186728373742853 0.8396223009285089 0.6945431160676236 0.47629343845451166 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.4954892574834829 0.8686147829894594 0.6717575882034632 0.20411670261425433 0.027115051171701512 0.0034162079323442635 0.0012651869851848753 0.00034639899320036666 -0.00020036865567015383 -0.0004882452235482161 -0.0020584192224736234 -0.01033045972290571 -0.03521109035917444 -0.08334689542730384 -0.15419934127445 -0.20642957902388837 -0.1221812245170763 0.14012518189977033 0.47467588100184205 0.6824889460247667 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.13993841620624156 0.6528364843004064 0.7274338471252871 0.6275165461963711 0.17190998412922162 0.03093624738966359 0.009771438084674415 0.0032465327822652273 0.0008644072809057171 0.0005292673332924166 0.0015142617286606863 0.00664911106331592 0.021016811067991435 0.047559406169392575 0.08560574464996032 0.11440624409550348 0.09217133133930441 0.04646716595292083 0.07408690215492825 0.2504943954020989 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.03530425899525801 0.1947916489285059 0.5985341363433084 0.750542448171219 0.690521003904372 0.27453815683958377 0.11109297507710977 0.03596437202185668 0.007563255149946895 0.0019857610302539946 0.001265963312525278 -0.00038304006988596823 -0.007454286470852762 -0.021500316813582665 -0.04034587794177437 -0.05066883944304677 -0.024693584099596315 0.031278779144743606 0.07345210410367065 0.0868603690059326 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0044457696156047204 0.02575536317220532 0.14389001583017466 0.6318332735628499 0.7020496490105488 0.7645947470968396 0.4245000116879691 0.1426506749886009 0.030217985286780522 0.0068406292231288504 0.003527470057632727 0.003413870035749387 0.006070060886774809 0.013361084643559914 0.024218515826061018 0.030207467794653938 0.014614962367151735 -0.01889180342749871 -0.044434129137333245 -0.05020136099234295 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.000756099037561789 0.0033420072878669726 0.024904744251719995 0.22618954605318292 0.7317720793950104 0.582284620771208 0.6866042591025339 0.33831432540573736 0.09519854226938353 0.022831369315706316 0.008433499200752393 0.002949559584746449 -0.0021480468921444198 -0.0083793737840418 -0.015964153380994977 -0.019738987182315426 -0.008291566843657555 0.015733920651725165 0.03424569110433607 0.03895578330148332 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0007509272744945739 0.0014710361441648348 0.008063057224070832 0.08979648926734561 0.37644956870970486 0.7551760218686556 0.579599893681955 0.7509690001498738 0.4019963703804609 0.14964191794166706 0.06732159282466474 0.032557982130976916 0.013617744728781416 0.008177206948236062 0.009953613126145712 0.012122844601921076 0.007870908413687368 -0.0027747739356427134 -0.011808040176421276 -0.013942055754670455 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0010933780672305626 0.0008426438312307558 0.002747339425887387 0.029139347547010506 0.12555437550781734 0.3160412234568 0.7321331942690971 0.5476636481160297 0.773344656136816 0.5228258849523095 0.30015314747570176 0.14822385988239575 0.053864978702514006 0.014178321608387015 0.001915663679666482 -0.00089960452669142 0.0024840535008976514 0.008629177703020643 0.012390363003917826 0.012348067986445884 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0010029715845244203 0.00032291797236906817 0.0006345540636318991 0.006213484451678832 0.026584738715043233 0.08064037739158374 0.31203748389523345 0.7622130558318682 0.47989902668535933 0.7468919646687946 0.5844828076198828 0.3076502633023704 0.11712490041254722 0.03729012800968886 0.015936314608858443 0.010587255311379475 0.004540911141704422 -0.003378040870381009 -0.008340303004659873 -0.009093419584040648 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0012604233552863688 0.00020042858900210121 0.00023340601029869334 0.0017673612171146685 0.006257022136131831 0.01908549016957994 0.10553850689527879 0.407483516586202 0.8253099003974074 0.3818896011665409 0.6384255680668792 0.4978642512313008 0.24931184274521043 0.09137451585300457 0.03187972671296527 0.013900201357947168 0.008564348789880993 0.0081263055642414 0.008576714724509842 0.00813087522130185 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.004673261522189239 0.0005275751998768523 0.00037273466439827105 0.0016452116197411277 0.003575912163823596 0.007998684227319384 0.04646381673101477 0.2183506088477983 0.5406030322752023 0.8475824543762518 0.39503923069571484 0.7062601948609506 0.5805838568716439 0.3108592477207441 0.14745942962691244 0.08013178552578927 0.04253347323784412 0.0162585729729282 0.002658273102034897 -0.0011585015441411934 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.022892478927629197 0.002369776012448131 0.0011007577728922007 0.0025845211997026314 0.0030969212655942487 0.004410267676370807 0.022371509947614165 0.10714098666486373 0.2757692174546693 0.5024053515494593 0.8235225022755663 0.36736114366996875 0.6945261454289435 0.6331662279771186 0.41456425715937123 0.2505504532849685 0.1333322123832745 0.056190000709552594 0.02069962075466178 0.011351724060205676 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.07722264833931936 0.0076780808124464845 0.0024414268892526884 0.0031327522676623857 0.0021157056383434383 0.0019321567023818755 0.008385411698039644 0.03973795754626482 0.10336383282988214 0.21299236381298908 0.47452150176198155 0.8360581365295573 0.30635505138239916 0.627883645958683 0.6260839649274255 0.4322972488374584 0.21294285861206425 0.06541212290282548 0.007832072511157431 0.0010158152584574017 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.1835510039609558 0.018551114231069425 0.004293223441854103 0.0031750461156396376 0.0012657305195947024 0.0007593391266956595 0.002766548679191313 0.01252986275541879 0.031832768466182736 0.07153772912287462 0.20878964043172557 0.5168887098786058 0.8589770428863565 0.23369189141742688 0.46416002703673326 0.3977958878010106 0.17704189661746367 0.02013861226885181 -0.023997278471858514 -0.011008422711275343 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.3640983576550366 0.046466817120581226 0.009639235131901278 0.004817275991235866 0.0012969793671893117 0.0005420236436424839 0.001521485391672366 0.005749470061052732 0.012507605828791174 0.026868859928768796 0.09121296130185183 0.28837043298022 0.6112228781738439 0.89860009840827 0.17734729139958555 0.3400667320390011 0.2641692805887422 0.0963016840019637 0.008204113055604794 0.006316655894332515 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.6199109131421885 0.12785110691339965 0.0313016027634215 0.013512444910211011 0.003045449638059449 0.000995039824148341 0.0019898941479791986 0.005397773280789716 0.008670921362068158 0.015157670386368121 0.05063472648874113 0.17622413609964763 0.4159432932340139 0.6877850537918145 0.9024459201416005 0.16038348230900862 0.3331019127634759 0.32233715134595203 0.21134352224057554 0.12932638166756244 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.8186732467106017 0.29951497567154806 0.09953610441685301 0.043268847198067645 0.009380841676123798 0.0026201766104041613 0.0036905483603607734 0.006814855455023468 0.007655070755526318 0.010140694767973905 0.030366960655628043 0.10595750831473474 0.25519104275719634 0.4394023031189203 0.650611366658185 0.8879425239532279 0.16816779401419935 0.369398487095057 0.39555437328914306 0.295812020477011 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.8396227207395545 0.5377384269091086 0.24542729978941608 0.110879085397081 0.023856106697302353 0.005855318526244986 0.005911830672264455 0.007512542172206589 0.005954511097352038 0.005983219425981332 0.01585103047646528 0.05437242366700922 0.13106040359884066 0.2307130303037917 0.379370764743143 0.6305669564270212 0.8940230413025004 0.11731255865901072 0.2652984102902564 0.3076318810317202 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.6945434633390949 0.7564489681681593 0.46995366030916136 0.22302927242942652 0.048220172014827936 0.01057074816652166 0.00781306340221759 0.006971538081022406 0.00397123319735068 0.0030637260089022467 0.007180966413035531 0.024047893475625633 0.05757403523141519 0.10277901181800257 0.18568307383293076 0.3711052091886543 0.6540400265326823 0.9044131811185793 0.07192846736055095 0.17622816482927312 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.4762936766011714 0.828818151909036 0.7073369461886921 0.3785043435816474 0.08842076141261883 0.018587147771367517 0.010674319341562221 0.007004876721805198 0.002986718635318442 0.0018010448066119336 0.0036477879415751165 0.01140773409765339 0.025938138188051386 0.04494698968018632 0.08546074908935598 0.1978829483969842 0.4206024784360143 0.6998208525062006 0.9229216758526686 0.0480907525215469 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.000000499999875 0.4954890097390399 0.13993834623708593 0.03530424134314175 0.00444576739272158 0.0007560986595125537 0.0007509268990312181 0.001093377520541939 0.0010029710830390041 0.0012604227250751637 0.004673259185560229 0.022892467481398317 0.07722260972802414 0.18355091218552266 0.36409817560599433 0.6199106031869643 0.8186728373742853 0.8396223009285089 0.6945431160676236 0.47629343845451166; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.4954892574834829 0.8686147829894594 0.6717575882034632 0.20411670261425433 0.027115051171701512 0.0034162079323442635 0.0012651869851848753 0.00034639899320036666 -0.00020036865567015383 -0.0004882452235482161 -0.0020584192224736234 -0.01033045972290571 -0.03521109035917444 -0.08334689542730384 -0.15419934127445 -0.20642957902388837 -0.1221812245170763 0.14012518189977033 0.47467588100184205 0.6824889460247667; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.13993841620624156 0.6528364843004064 0.7274338471252871 0.6275165461963711 0.17190998412922162 0.03093624738966359 0.009771438084674415 0.0032465327822652273 0.0008644072809057171 0.0005292673332924166 0.0015142617286606863 0.00664911106331592 0.021016811067991435 0.047559406169392575 0.08560574464996032 0.11440624409550348 0.09217133133930441 0.04646716595292083 0.07408690215492825 0.2504943954020989; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.03530425899525801 0.1947916489285059 0.5985341363433084 0.750542448171219 0.690521003904372 0.27453815683958377 0.11109297507710977 0.03596437202185668 0.007563255149946895 0.0019857610302539946 0.001265963312525278 -0.00038304006988596823 -0.007454286470852762 -0.021500316813582665 -0.04034587794177437 -0.05066883944304677 -0.024693584099596315 0.031278779144743606 0.07345210410367065 0.0868603690059326; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0044457696156047204 0.02575536317220532 0.14389001583017466 0.6318332735628499 0.7020496490105488 0.7645947470968396 0.4245000116879691 0.1426506749886009 0.030217985286780522 0.0068406292231288504 0.003527470057632727 0.003413870035749387 0.006070060886774809 0.013361084643559914 0.024218515826061018 0.030207467794653938 0.014614962367151735 -0.01889180342749871 -0.044434129137333245 -0.05020136099234295; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.000756099037561789 0.0033420072878669726 0.024904744251719995 0.22618954605318292 0.7317720793950104 0.582284620771208 0.6866042591025339 0.33831432540573736 0.09519854226938353 0.022831369315706316 0.008433499200752393 0.002949559584746449 -0.0021480468921444198 -0.0083793737840418 -0.015964153380994977 -0.019738987182315426 -0.008291566843657555 0.015733920651725165 0.03424569110433607 0.03895578330148332; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0007509272744945739 0.0014710361441648348 0.008063057224070832 0.08979648926734561 0.37644956870970486 0.7551760218686556 0.579599893681955 0.7509690001498738 0.4019963703804609 0.14964191794166706 0.06732159282466474 0.032557982130976916 0.013617744728781416 0.008177206948236062 0.009953613126145712 0.012122844601921076 0.007870908413687368 -0.0027747739356427134 -0.011808040176421276 -0.013942055754670455; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0010933780672305626 0.0008426438312307558 0.002747339425887387 0.029139347547010506 0.12555437550781734 0.3160412234568 0.7321331942690971 0.5476636481160297 0.773344656136816 0.5228258849523095 0.30015314747570176 0.14822385988239575 0.053864978702514006 0.014178321608387015 0.001915663679666482 -0.00089960452669142 0.0024840535008976514 0.008629177703020643 0.012390363003917826 0.012348067986445884; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0010029715845244203 0.00032291797236906817 0.0006345540636318991 0.006213484451678832 0.026584738715043233 0.08064037739158374 0.31203748389523345 0.7622130558318682 0.47989902668535933 0.7468919646687946 0.5844828076198828 0.3076502633023704 0.11712490041254722 0.03729012800968886 0.015936314608858443 0.010587255311379475 0.004540911141704422 -0.003378040870381009 -0.008340303004659873 -0.009093419584040648; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0012604233552863688 0.00020042858900210121 0.00023340601029869334 0.0017673612171146685 0.006257022136131831 0.01908549016957994 0.10553850689527879 0.407483516586202 0.8253099003974074 0.3818896011665409 0.6384255680668792 0.4978642512313008 0.24931184274521043 0.09137451585300457 0.03187972671296527 0.013900201357947168 0.008564348789880993 0.0081263055642414 0.008576714724509842 0.00813087522130185; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.004673261522189239 0.0005275751998768523 0.00037273466439827105 0.0016452116197411277 0.003575912163823596 0.007998684227319384 0.04646381673101477 0.2183506088477983 0.5406030322752023 0.8475824543762518 0.39503923069571484 0.7062601948609506 0.5805838568716439 0.3108592477207441 0.14745942962691244 0.08013178552578927 0.04253347323784412 0.0162585729729282 0.002658273102034897 -0.0011585015441411934; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.022892478927629197 0.002369776012448131 0.0011007577728922007 0.0025845211997026314 0.0030969212655942487 0.004410267676370807 0.022371509947614165 0.10714098666486373 0.2757692174546693 0.5024053515494593 0.8235225022755663 0.36736114366996875 0.6945261454289435 0.6331662279771186 0.41456425715937123 0.2505504532849685 0.1333322123832745 0.056190000709552594 0.02069962075466178 0.011351724060205676; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.07722264833931936 0.0076780808124464845 0.0024414268892526884 0.0031327522676623857 0.0021157056383434383 0.0019321567023818755 0.008385411698039644 0.03973795754626482 0.10336383282988214 0.21299236381298908 0.47452150176198155 0.8360581365295573 0.30635505138239916 0.627883645958683 0.6260839649274255 0.4322972488374584 0.21294285861206425 0.06541212290282548 0.007832072511157431 0.0010158152584574017; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1835510039609558 0.018551114231069425 0.004293223441854103 0.0031750461156396376 0.0012657305195947024 0.0007593391266956595 0.002766548679191313 0.01252986275541879 0.031832768466182736 0.07153772912287462 0.20878964043172557 0.5168887098786058 0.8589770428863565 0.23369189141742688 0.46416002703673326 0.3977958878010106 0.17704189661746367 0.02013861226885181 -0.023997278471858514 -0.011008422711275343; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.3640983576550366 0.046466817120581226 0.009639235131901278 0.004817275991235866 0.0012969793671893117 0.0005420236436424839 0.001521485391672366 0.005749470061052732 0.012507605828791174 0.026868859928768796 0.09121296130185183 0.28837043298022 0.6112228781738439 0.89860009840827 0.17734729139958555 0.3400667320390011 0.2641692805887422 0.0963016840019637 0.008204113055604794 0.006316655894332515; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.6199109131421885 0.12785110691339965 0.0313016027634215 0.013512444910211011 0.003045449638059449 0.000995039824148341 0.0019898941479791986 0.005397773280789716 0.008670921362068158 0.015157670386368121 0.05063472648874113 0.17622413609964763 0.4159432932340139 0.6877850537918145 0.9024459201416005 0.16038348230900862 0.3331019127634759 0.32233715134595203 0.21134352224057554 0.12932638166756244; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.8186732467106017 0.29951497567154806 0.09953610441685301 0.043268847198067645 0.009380841676123798 0.0026201766104041613 0.0036905483603607734 0.006814855455023468 0.007655070755526318 0.010140694767973905 0.030366960655628043 0.10595750831473474 0.25519104275719634 0.4394023031189203 0.650611366658185 0.8879425239532279 0.16816779401419935 0.369398487095057 0.39555437328914306 0.295812020477011; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.8396227207395545 0.5377384269091086 0.24542729978941608 0.110879085397081 0.023856106697302353 0.005855318526244986 0.005911830672264455 0.007512542172206589 0.005954511097352038 0.005983219425981332 0.01585103047646528 0.05437242366700922 0.13106040359884066 0.2307130303037917 0.379370764743143 0.6305669564270212 0.8940230413025004 0.11731255865901072 0.2652984102902564 0.3076318810317202; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.6945434633390949 0.7564489681681593 0.46995366030916136 0.22302927242942652 0.048220172014827936 0.01057074816652166 0.00781306340221759 0.006971538081022406 0.00397123319735068 0.0030637260089022467 0.007180966413035531 0.024047893475625633 0.05757403523141519 0.10277901181800257 0.18568307383293076 0.3711052091886543 0.6540400265326823 0.9044131811185793 0.07192846736055095 0.17622816482927312; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.4762936766011714 0.828818151909036 0.7073369461886921 0.3785043435816474 0.08842076141261883 0.018587147771367517 0.010674319341562221 0.007004876721805198 0.002986718635318442 0.0018010448066119336 0.0036477879415751165 0.01140773409765339 0.025938138188051386 0.04494698968018632 0.08546074908935598 0.1978829483969842 0.4206024784360143 0.6998208525062006 0.9229216758526686 0.0480907525215469], 'U', 0), x = Tuple{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64}[([2.0, 0.0], 1), ([1.8722493084803944, 1.1781761209680564], 1), ([1.2054087302920322, 1.8170664239060492], 1), ([0.1927492468605379, 1.8496886378714485], 1), ([-0.7634822105326886, 1.7873921333439653], 1), ([-1.491074439188309, 1.478876477818158], 1), ([-1.715496730290473, 0.763863564666627], 1), ([-1.6927384267129184, -0.02548281303906763], 1), ([-1.6375083040399991, -0.7603351496646811], 1), ([-1.4020967698225453, -1.3335489511640215], 1), ([-0.8766694239883193, -1.5673446110271225], 1), ([-0.25353811206310417, -1.5733593627742373], 1), ([0.3441060668872955, -1.542770322404427], 1), ([0.8906186118860617, -1.4696252360523447], 1), ([1.2853939931883984, -1.228820867354409], 1), ([1.4436651991698213, -0.804270221306424], 1), ([1.4524849481444388, -0.3168086958982196], 1), ([1.4296700708970633, 0.1559776650721993], 1), ([1.3954544084611666, 0.6029309254295775], 1), ([1.2893454342143849, 0.9891467953863277], 1), ([2.0, 0.0], 2), ([1.8722493084803944, 1.1781761209680564], 2), ([1.2054087302920322, 1.8170664239060492], 2), ([0.1927492468605379, 1.8496886378714485], 2), ([-0.7634822105326886, 1.7873921333439653], 2), ([-1.491074439188309, 1.478876477818158], 2), ([-1.715496730290473, 0.763863564666627], 2), ([-1.6927384267129184, -0.02548281303906763], 2), ([-1.6375083040399991, -0.7603351496646811], 2), ([-1.4020967698225453, -1.3335489511640215], 2), ([-0.8766694239883193, -1.5673446110271225], 2), ([-0.25353811206310417, -1.5733593627742373], 2), ([0.3441060668872955, -1.542770322404427], 2), ([0.8906186118860617, -1.4696252360523447], 2), ([1.2853939931883984, -1.228820867354409], 2), ([1.4436651991698213, -0.804270221306424], 2), ([1.4524849481444388, -0.3168086958982196], 2), ([1.4296700708970633, 0.1559776650721993], 2), ([1.3954544084611666, 0.6029309254295775], 2), ([1.2893454342143849, 0.9891467953863277], 2)], δ = [-0.03165347046698772, 0.9994989033547739, -0.3131227464619143, 0.9497126647824319, -0.9679245733258961, 0.251240960736664, -0.9981774178119854, -0.06034768073585721, -0.9925599672581026, -0.12175677146095097, -0.6642477894990115, -0.7475124575187205, -0.03420468135829994, -0.9994148486855582, 0.045374704086262395, -0.9989700377033758, 0.1533555686837154, -0.9881710730200991, 0.6865910743527178, -0.7270438065338158, 0.9917640001668678, -0.1280787569154741, 0.9987723387326086, 0.04953600087406405, 0.9983241843164803, 0.057869015965663614, 0.9626976689863879, 0.2705793749127511, 0.6273635437792426, 0.7787265142119859, 0.1154155588390388, 0.9933172951166572, -0.03179474807481451, 0.9994944191914525, -0.06279683463643287, 0.9980263310953498, -0.10676913637339373, 0.9942838385079382, -0.5438482382019165, 0.8391835876640293]))","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"and optimize","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"loss, buildgppost = gp_negloglikelihood(fin_gpmodel, u_mo, y)\n\np0 = log.(ones(2))\nunfl(x) = exp.(x)\n\noptf = Optimization.OptimizationFunction((x, p) -> (loss ∘ unfl)(x), adtype)\noptprob = Optimization.OptimizationProblem(optf, p0)\n\noptp = Optimization.solve(optprob, NelderMead(); maxiters=300)\n\noptparams = unfl(optp)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"2-element Vector{Float64}:\n  0.6525913342039246\n 42.572978622897175","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"We build a posterior GP with the optimized parameters,","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"optpost = buildgppost(optparams)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"and incorporate into a GP ode model. Unfortunately, this does not currently match the previous implementation.","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"gpode = GPODE(optpost, tspan)\ngpsol = gpode(u0)\n\nplot(gpsol)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"This page was generated using Literate.jl.","category":"page"}]
}

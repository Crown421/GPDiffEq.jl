var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [GPDiffEq]","category":"page"},{"location":"api/#GPDiffEq.GPODE","page":"API","title":"GPDiffEq.GPODE","text":"Defines an ODE model with a GP vector field. The returned model can be evaluated for an initial value as input.\n\n    GPODE(model, tspan, args...; kwargs...)\n\nArguments:\n\nmodel: An AbstractGP.FiniteGP\ntspan: The time span for the ODE solver\nargs: Additional positional arguments from DifferentialEquations.jl\nkwargs: Additional keyword arguments from DifferentialEquations.jl\n\n\n\n\n\n","category":"type"},{"location":"api/#GPDiffEq.gp_negloglikelihood-Tuple{Any, Any, Any}","page":"API","title":"GPDiffEq.gp_negloglikelihood","text":"Returns two function function. 1) to compute the loglikelihood and 2) rebuild the GP from a new set of parameters.\n\n    gp_negloglikelihood(gp, x, y)\n\nArguments:\n\ngp: An AbstractGP.FiniteGP\nx: input data\ny: output data\n\n\n\n\n\n","category":"method"},{"location":"api/#GPDiffEq.gp_train","page":"API","title":"GPDiffEq.gp_train","text":"Simplified copy of sciml_train\n\ngp_train(loss, θ, opt=ADAGrad(0.5), adtype=GalacticOptim.AutoZygote(), args...;\nlower_bounds=nothing, upper_bounds=nothing, maxiters=1000, kwargs...,)\n\n\n\n\n\n","category":"function"},{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"This packages uses GPs to learn the vector field of unknown dynamical systems. The rationale is that for many systems, the vector field is substantially simpler than the flow map (see e.g. emergence)","category":"page"},{"location":"theory/#Modelling-choices","page":"Theory","title":"Modelling choices","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"While GP models are sometimes referred to as non-parametric, there are some modelling choices that need to be made. ","category":"page"},{"location":"theory/#Kernel","page":"Theory","title":"Kernel","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"GPs represent a distribution over a function space, constrained by the available data points. The choice of kernel determines the Reproducing Kernel Hilbert Space (RKHS) underpinning the distribution, and therefore influences the accuracy of the model uncertainty behaviour. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"This package uses KernelFunction.jl, which means that all kernels implemented there are available. ","category":"page"},{"location":"theory/#Inducing-Points","page":"Theory","title":"Inducing Points","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"To limit the computational cost, we use inducing points by default. Various methods to select inducing points can be found in the InducingPoints.jl package.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"","category":"page"},{"location":"quickstart/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quickstart/#Setup","page":"Quick Start","title":"Setup","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"First we define an ODE and generate some data points from it. ","category":"page"},{"location":"#GPDiffEq.jl","page":"Home","title":"GPDiffEq.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The GPDiffEq.jl package facilitates learning the (nonlinear) vector field of unknown system using Gaussian Processes (GPs). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"It bridges the Universal Differential Equations in the SciML community using Neural Networks and GP ecosystem by the JuliaGaussianProcesses organization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the GP machinery, this package builds on ","category":"page"},{"location":"","page":"Home","title":"Home","text":"KernelFunctions.jl\nApproximateGPs.jl\nInducingPoints.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It further uses Flux.jl for training, and DifferentialEquations.jl for solvers. ","category":"page"},{"location":"symmetries/#Symmetries","page":"Symmetries","title":"Symmetries","text":"","category":"section"},{"location":"symmetries/","page":"Symmetries","title":"Symmetries","text":"In addition to the kernels from KernelFunctions, we implement Group-Integration-Matrix (GIM) Kernels. ","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"EditURL = \"https://github.com/Crown421/GPDiffEq.jl/blob/main/examples/spiral/script.jl\"","category":"page"},{"location":"examples/spiral/#Spiral-ODE","page":"Spiral ODE","title":"Spiral ODE","text":"","category":"section"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/spiral/#Setup","page":"Spiral ODE","title":"Setup","text":"","category":"section"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Load necessary packages","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"using ApproximateGPs\nusing Plots\nusing LinearAlgebra\nusing DifferentialEquations\nusing InducingPoints\nusing GPDiffEq","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"First we define an ODE and generate some data points from it.","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"u0 = [2.0; 0.0]\ndatasize = 20\ntspan = (0.0, 3.0)\ndatatspan = (0.0, 1.5)\ndatatsteps = range(datatspan[1], datatspan[2]; length=datasize)\n\nfunction trueODEfunc(u, p, t)\n    du = similar(u)\n    true_A = [-0.1 2.0; -2.0 -0.1]\n    return du .= ((u .^ 3)'true_A)'\nend\n\nprob_trueode = ODEProblem(trueODEfunc, u0, tspan)\nsol = solve(prob_trueode, Tsit5())\node_data = Array(sol(datatsteps))\n\ntraj = sol(datatsteps);\n\np = plot(sol)\nscatter!(p, datatsteps, ode_data[1, :]; markersize=4)#, markerstyle = :star)\nscatter!(p, datatsteps, ode_data[2, :]; m=(4, :pentagon), lab=\"pentagon\")#, markerstyle = :star)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/#Gradient-data","page":"Spiral ODE","title":"Gradient data","text":"","category":"section"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"For this example we get gradient observations from our trajectory data via finite differences","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"First, we set all necessary variables","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"scaker = with_lengthscale(SqExponentialKernel(), 1.0)\nmoker = IndependentMOKernel(scaker)\n##ToDo: make ODE data into col_vecs and add number programmatically\nx = MOInput(datatsteps, 2)\nσ_n = 1e-6\ny = ode_data'[:]","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"and build a finite GP from them","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"g = GP(moker)\ngt = g(x, σ_n)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Now we use the following convenience functions to a loglikelihood loss function and a function to rebuild the gp with the optimal parameters. Note that we use optimize over the logarithm of the parameters, to ensure their positivity. For more details see this KernelFunctions.jl example","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"loss, buildgppost = gp_negloglikelihood(gt, x, y)\n\np0 = log.([1.0])\nunfl(x) = exp.(x)\noptp = gp_train(loss ∘ unfl, p0; show_trace=true, show_every=15)\noptparams = unfl(optp)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"1-element Vector{Float64}:\n 7.160713088647084","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Now we can build a FiniteGP with the optimized parameters,","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"optpost = buildgppost(optparams)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"which fits pretty well","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"t_plot = range(datatspan...; length=100)\nplot(sol(t_plot); label=[\"ode\" \"\"], color=[:skyblue :navy], linewidth=2.5)\nt_plot_mo = MOInput(t_plot, 2)\npred_mean = mean(optpost, t_plot_mo)\npred_mean = reshape(pred_mean, :, 2)\n# pred_cov = diag(cov(optpost, t_plot_mo))\n# pred_cov = reshape(pred_cov, :, 2)\n# plot!(t_plot, pred_mean; ribbons = pred_cov)\nplot!(\n    t_plot,\n    pred_mean;\n    label=[\"gp\" \"\"],\n    color=[:tomato :firebrick],\n    linewidth=3.5,\n    linestyle=:dash,\n)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"GPs are closed under linear operators, which means that we can very easily obtain derivative information:","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"deriv_post = build_deriv_model(optpost)\ndu_pred_mean = mean(deriv_post, x)\ndu_pred_mean = reshape(du_pred_mean, :, 2)\ndu_pred_mean = du_pred_mean ./ norm.(eachrow(du_pred_mean))\n\ndu = trueODEfunc.(eachcol(ode_data), 0, 0)\ndu = du ./ maximum(norm.(du))\nquiver(ode_data[1, :], ode_data[2, :]; quiver=(getindex.(du, 1), getindex.(du, 2)))\nquiver!(ode_data[1, :], ode_data[2, :]; quiver=(du_pred_mean[:, 1], du_pred_mean[:, 2]))","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"This leaves us with u and udot pairs as in the input and output:","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"u = ColVecs(ode_data)\nudot = ColVecs(du_pred_mean')","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"20-element KernelFunctions.ColVecs{Float64, LinearAlgebra.Adjoint{Float64, Matrix{Float64}}, SubArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Matrix{Float64}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, false}}:\n [-0.04371130303234501, 0.9990442042208214]\n [-0.31048224188536255, 0.9505791800128167]\n [-0.967988581738815, 0.2509942342430949]\n [-0.9981745514807886, -0.06039507244905279]\n [-0.9925640431919466, -0.12172353988631636]\n [-0.6641107189452709, -0.7476342374329814]\n [-0.034397323667447376, -0.9994082369705168]\n [0.04557885467232294, -0.9989607439768389]\n [0.15311894750590507, -0.9882077655608076]\n [0.6867685282184496, -0.7268761852259742]\n [0.9917569390408382, -0.12813342212064405]\n [0.9987719487834845, 0.04954386261930529]\n [0.9983253771900078, 0.05784843350021442]\n [0.9627106802927389, 0.2705330775529899]\n [0.6271295191027246, 0.7789149929677728]\n [0.11581089283061405, 0.9932712807193089]\n [-0.03217748499738198, 0.9994821706560069]\n [-0.062444176348114715, 0.9980484581623307]\n [-0.10704663953685675, 0.9942540002252274]\n [-0.5416232140818269, 0.8406213737275964]","category":"page"},{"location":"examples/spiral/#Building-a-model","page":"Spiral ODE","title":"Building a model","text":"","category":"section"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"Now we build a model for the the ODE.","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"scaker = with_lengthscale(SqExponentialKernel(), ones(2))\nmoker = IndependentMOKernel(scaker)\n\nu_mo = MOInput(u, 2)\nσ_n = 1e-6\ny = reduce(vcat, udot.X)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"and build a posterior GP","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"gpmodel = GP(moker)\nfin_gpmodel = gpmodel(u_mo, σ_n)\npost_gpmodel = posterior(fin_gpmodel, y)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"AbstractGPs.PosteriorGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.IndependentMOKernel{KernelFunctions.TransformedKernel{KernelFunctions.SqExponentialKernel{Distances.Euclidean}, KernelFunctions.ARDTransform{Vector{Float64}}}}}, NamedTuple{(:α, :C, :x, :δ), Tuple{Vector{Float64}, LinearAlgebra.Cholesky{Float64, Matrix{Float64}}, KernelFunctions.MOInputIsotopicByOutputs{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, KernelFunctions.ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Vector{Float64}}}}(AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.IndependentMOKernel{KernelFunctions.TransformedKernel{KernelFunctions.SqExponentialKernel{Distances.Euclidean}, KernelFunctions.ARDTransform{Vector{Float64}}}}}(AbstractGPs.ZeroMean{Float64}(), Independent Multi-Output Kernel\n\tSquared Exponential Kernel (metric = Distances.Euclidean(0.0))\n\t- ARD Transform (dims: 2)), (α = [1.7927791851956107, -17.09163609117613, 16.993197596337236, 1.3346515599735769, -0.3773659411363959, -1.9983049653131872, 2.876518965698415, -2.411276562972048, 3.4668621086634857, -10.080039008169692, 25.118401157190927, -48.07327388489533, 84.66039900176747, -142.27124783947409, 238.59215555351295, -369.1830063708692, 502.71102220124965, -548.8955324362437, 417.2371286894434, -154.75997499943963, 0.9920827582595775, -2.5253727600629814, 2.272251146770008, -1.1250430946303358, 2.5255102427322482, -3.593015503496018, 3.644543247684808, -6.749820327541999, 11.69733958763201, -22.56948431338707, 34.869340974104496, -49.893672544614965, 68.70632468168654, -88.67036338252588, 105.01602830757565, -115.87792711031432, 124.9904725537457, -115.98229661113263, 76.5852883183501, -24.34849717924709], C = LinearAlgebra.Cholesky{Float64, Matrix{Float64}}([1.000000499999875 0.4954890097343885 0.1399383462352052 0.03530424134268343 0.0044457673926741725 0.0007560986593833836 0.0007509268984884519 0.001093377519930028 0.0010029710822528686 0.0012604227256154965 0.004673259173698228 0.022892467463628777 0.07722260977487161 0.18355091225761175 0.36409817717199544 0.6199106059092723 0.8186728373097375 0.8396222994661875 0.6945431152618647 0.4762934388650459 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.49548925747883144 0.8686147829921127 0.6717575882014091 0.20411670261057618 0.02711505117064404 0.0034162079324756033 0.0012651869843569434 0.0003463989927690781 -0.00020036865568367568 -0.00048824522381653334 -0.0020584192175739724 -0.010330459716580963 -0.03521109038539889 -0.08334689547656121 -0.15419934183102563 -0.20642957874766588 -0.12218122259430056 0.14012518313920133 0.47467588012677636 0.682488944144967 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.13993841620436084 0.6528364842988217 0.7274338471275459 0.6275165461916787 0.17190998412415445 0.030936247393645346 0.009771438079872822 0.0032465327796507236 0.0008644072798435157 0.00052926733340167 0.0015142617248522737 0.006649111058155863 0.021016811080686114 0.04755940619207292 0.08560574493893792 0.11440624408174857 0.09217133095644069 0.04646716626809652 0.07408690296449265 0.2504943952784122 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.03530425899479969 0.19479164892546127 0.5985341363382919 0.750542448176164 0.6905210039003836 0.27453815687079147 0.11109297504555432 0.03596437199875397 0.007563255140537312 0.001985761029543246 0.0012659633095865091 -0.00038304007276650904 -0.007454286482751296 -0.021500316833566714 -0.040345878085280486 -0.05066883927955117 -0.024693583551411023 0.03127877952312756 0.07345210438050312 0.08686036974585969 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.004445769615557313 0.025755363171314567 0.14389001582609587 0.6318332735589655 0.7020496490157536 0.7645947471510693 0.42450001166063844 0.14265067492705072 0.030217985256073433 0.006840629220033681 0.003527470052179705 0.003413870031795267 0.006070060889597772 0.013361084652576096 0.024218515908965906 0.030207467700123586 0.014614962052318799 -0.01889180362548652 -0.044434129244327915 -0.05020136130235959 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0007560990374326188 0.0033420072879226017 0.02490474425474805 0.226189546080326 0.7317720794580437 0.5822846206850731 0.6866042590252859 0.33831432520437743 0.09519854214734576 0.022831369288349928 0.008433499186047227 0.0029495595750104334 -0.002148046901682411 -0.008379373795240272 -0.01596415344151699 -0.0197389871095172 -0.008291566610876178 0.015733920810800293 0.0342456912025853 0.038955783534465264 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0007509272739518073 0.0014710361431766105 0.008063057219963927 0.08979648924095918 0.3764495686695929 0.7551760217613493 0.579599893799613 0.7509690000932784 0.4019963701271703 0.14964191783777064 0.06732159275483092 0.03255798207495618 0.013617744694211537 0.008177206933044714 0.009953613142287106 0.01212284459629126 0.007870908344603895 -0.0027747739656703158 -0.011808040171677612 -0.013942055806150674 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0010933780666186515 0.0008426438305487703 0.002747339423614723 0.029139347528081498 0.12555437544877143 0.3160412232657953 0.732133194126492 0.5476636483355891 0.773344656148594 0.5228258848621622 0.3001531474157241 0.14822385975770463 0.053864978579882705 0.014178321542136899 0.0019156636142494872 -0.0008996044587851063 0.0024840536141935467 0.00862917777430176 0.012390363045224369 0.012348068060281039 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0010029715837382843 0.0003229179719626045 0.0006345540627406016 0.006213484443953101 0.026584738686924254 0.08064037728810587 0.31203748368941825 0.7622130557279322 0.47989902690484726 0.7468919646940299 0.5844828078055839 0.30765026322065064 0.1171249002129135 0.03729012790133511 0.01593631451795336 0.010587255281082873 0.004540911077999209 -0.0033780409089950785 -0.00834030302496202 -0.009093419634251487 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0012604233558267018 0.0002004285890296076 0.00023340601027336508 0.0017673612166226422 0.006257022133507449 0.01908549014956017 0.10553850683047614 0.40748351655034337 0.8253099004245065 0.3818896012830064 0.638425568422509 0.49786425159962366 0.24931184269255793 0.09137451574097764 0.03187972648300072 0.013900201380657392 0.008564348872010798 0.008126305628485129 0.008576714766749587 0.00813087527680759 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.004673261510327231 0.0005275751982280707 0.0003727346632581912 0.0016452116157315206 0.003575912157399029 0.007998684213180127 0.04646381668488625 0.21835060881676635 0.5406030324018762 0.847582454663368 0.39503922990424867 0.7062601945279156 0.5805838562775456 0.31085924706746826 0.1474594286204489 0.08013178524425077 0.042533473138786276 0.016258572973933634 0.0026582731305247356 -0.001158501545748706 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.022892478909859647 0.0023697760090033958 0.0011007577708938407 0.002584521194960699 0.0030969212600300607 0.004410267666677376 0.022371509909891313 0.10714098658038877 0.2757692173559496 0.502405351604152 0.8235225019536191 0.36736114393627195 0.6945261457019747 0.633166227540676 0.4145642553822779 0.2505504523071092 0.13333221206983786 0.056190000815485766 0.020699620940311133 0.011351724184364982 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.07722264838616684 0.007678080812427322 0.002441426887401083 0.003132752262957859 0.00211570563377705 0.0019321566964090825 0.00838541167318049 0.03973795746117448 0.10336383264745143 0.21299236360016544 0.4745215009836339 0.8360581361694419 0.30635505201548036 0.6278836465462113 0.6260839641262829 0.432297246434454 0.2129428573789585 0.06541212281434113 0.007832072676535018 0.0010158152882163787 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.18355100403304495 0.018551114222928163 0.0042932234352849865 0.003175046107256799 0.001265730515002695 0.0007593391231002434 0.0027665486661819136 0.0125298627084531 0.031832768362901304 0.07153772897193203 0.2087896398075921 0.5168887092493083 0.8589770427307357 0.23369189187443276 0.4641600278279308 0.3977958843040484 0.1770418941986435 0.0201386117240143 -0.023997278499506676 -0.011008422860733032 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.3640983592210385 0.04646681741096504 0.009639235187198421 0.004817276006345843 0.0012969793678462912 0.0005420236423176474 0.0015214853845539017 0.005749470028128534 0.012507605740863365 0.02686885974611016 0.09121296058586341 0.28837043157183406 0.6112228766262512 0.898600097313266 0.17734729330946938 0.3400667334468346 0.26416928044317645 0.09630168457481325 0.008204113758131489 0.006316656140081002 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.6199109158644978 0.12785110849877301 0.0313016033194421 0.013512445176468367 0.0030454497017880244 0.000995039843827892 0.0019898941780036768 0.0053977733356160625 0.00867092140634876 0.015157670413295559 0.05063472634110581 0.1762241356436839 0.4159432921873005 0.6877850515618205 0.9024459189722173 0.1603834860650871 0.3331019163945191 0.3223371559488959 0.21134352697337372 0.12932638497535345 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.8186732466460539 0.2995149773055846 0.09953610541987093 0.04326884775896206 0.009380841819457907 0.002620176651384114 0.0036905484072053086 0.006814855518852964 0.007655070799899583 0.010140694804435305 0.030366960616738655 0.10595750814865211 0.2551910422223235 0.4394023015342273 0.6506113657817605 0.8879425249189821 0.16816779347153002 0.36939848615623516 0.3955543743935732 0.2958120235184972 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.8396227192772323 0.5377384272575988 0.24542730064488594 0.11087908607925101 0.02385610690022857 0.005855318582942604 0.005911830722814398 0.0075125422263591516 0.005954511130172609 0.005983219455595029 0.015851030486296637 0.05437242368924769 0.13106040358856036 0.23071302988977752 0.37937076513495754 0.6305669593690366 0.8940230424288751 0.1173125572846646 0.26529840840496527 0.30763188074577485 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.6945434625333355 0.7564489670068485 0.4699536601953634 0.22302927293610522 0.048220172241299014 0.010570748236570933 0.007813063457694848 0.006971538133290922 0.003971233226908686 0.0030637260343795185 0.007180966444978327 0.024047893578296457 0.05757403544951748 0.10277901200912463 0.18568307480338322 0.37110521294126425 0.6540400295482298 0.9044131820674947 0.07192846648473486 0.17622816379521533 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.4762936770117058 0.8288181504792247 0.7073369448916661 0.3785043436866993 0.08842076163287693 0.018587147860851035 0.010674319410965838 0.007004876779684728 0.002986718663718019 0.0018010448274263843 0.0036477879716724443 0.011407734191442288 0.02593813839192918 0.04494698994463848 0.08546074992258068 0.19788295159672964 0.4206024822320643 0.6998208549865903 0.9229216765426319 0.048090751793913755 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.000000499999875 0.4954890097343885 0.1399383462352052 0.03530424134268343 0.0044457673926741725 0.0007560986593833836 0.0007509268984884519 0.001093377519930028 0.0010029710822528686 0.0012604227256154965 0.004673259173698228 0.022892467463628777 0.07722260977487161 0.18355091225761175 0.36409817717199544 0.6199106059092723 0.8186728373097375 0.8396222994661875 0.6945431152618647 0.4762934388650459; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.49548925747883144 0.8686147829921127 0.6717575882014091 0.20411670261057618 0.02711505117064404 0.0034162079324756033 0.0012651869843569434 0.0003463989927690781 -0.00020036865568367568 -0.00048824522381653334 -0.0020584192175739724 -0.010330459716580963 -0.03521109038539889 -0.08334689547656121 -0.15419934183102563 -0.20642957874766588 -0.12218122259430056 0.14012518313920133 0.47467588012677636 0.682488944144967; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.13993841620436084 0.6528364842988217 0.7274338471275459 0.6275165461916787 0.17190998412415445 0.030936247393645346 0.009771438079872822 0.0032465327796507236 0.0008644072798435157 0.00052926733340167 0.0015142617248522737 0.006649111058155863 0.021016811080686114 0.04755940619207292 0.08560574493893792 0.11440624408174857 0.09217133095644069 0.04646716626809652 0.07408690296449265 0.2504943952784122; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.03530425899479969 0.19479164892546127 0.5985341363382919 0.750542448176164 0.6905210039003836 0.27453815687079147 0.11109297504555432 0.03596437199875397 0.007563255140537312 0.001985761029543246 0.0012659633095865091 -0.00038304007276650904 -0.007454286482751296 -0.021500316833566714 -0.040345878085280486 -0.05066883927955117 -0.024693583551411023 0.03127877952312756 0.07345210438050312 0.08686036974585969; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.004445769615557313 0.025755363171314567 0.14389001582609587 0.6318332735589655 0.7020496490157536 0.7645947471510693 0.42450001166063844 0.14265067492705072 0.030217985256073433 0.006840629220033681 0.003527470052179705 0.003413870031795267 0.006070060889597772 0.013361084652576096 0.024218515908965906 0.030207467700123586 0.014614962052318799 -0.01889180362548652 -0.044434129244327915 -0.05020136130235959; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0007560990374326188 0.0033420072879226017 0.02490474425474805 0.226189546080326 0.7317720794580437 0.5822846206850731 0.6866042590252859 0.33831432520437743 0.09519854214734576 0.022831369288349928 0.008433499186047227 0.0029495595750104334 -0.002148046901682411 -0.008379373795240272 -0.01596415344151699 -0.0197389871095172 -0.008291566610876178 0.015733920810800293 0.0342456912025853 0.038955783534465264; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0007509272739518073 0.0014710361431766105 0.008063057219963927 0.08979648924095918 0.3764495686695929 0.7551760217613493 0.579599893799613 0.7509690000932784 0.4019963701271703 0.14964191783777064 0.06732159275483092 0.03255798207495618 0.013617744694211537 0.008177206933044714 0.009953613142287106 0.01212284459629126 0.007870908344603895 -0.0027747739656703158 -0.011808040171677612 -0.013942055806150674; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0010933780666186515 0.0008426438305487703 0.002747339423614723 0.029139347528081498 0.12555437544877143 0.3160412232657953 0.732133194126492 0.5476636483355891 0.773344656148594 0.5228258848621622 0.3001531474157241 0.14822385975770463 0.053864978579882705 0.014178321542136899 0.0019156636142494872 -0.0008996044587851063 0.0024840536141935467 0.00862917777430176 0.012390363045224369 0.012348068060281039; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0010029715837382843 0.0003229179719626045 0.0006345540627406016 0.006213484443953101 0.026584738686924254 0.08064037728810587 0.31203748368941825 0.7622130557279322 0.47989902690484726 0.7468919646940299 0.5844828078055839 0.30765026322065064 0.1171249002129135 0.03729012790133511 0.01593631451795336 0.010587255281082873 0.004540911077999209 -0.0033780409089950785 -0.00834030302496202 -0.009093419634251487; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0012604233558267018 0.0002004285890296076 0.00023340601027336508 0.0017673612166226422 0.006257022133507449 0.01908549014956017 0.10553850683047614 0.40748351655034337 0.8253099004245065 0.3818896012830064 0.638425568422509 0.49786425159962366 0.24931184269255793 0.09137451574097764 0.03187972648300072 0.013900201380657392 0.008564348872010798 0.008126305628485129 0.008576714766749587 0.00813087527680759; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.004673261510327231 0.0005275751982280707 0.0003727346632581912 0.0016452116157315206 0.003575912157399029 0.007998684213180127 0.04646381668488625 0.21835060881676635 0.5406030324018762 0.847582454663368 0.39503922990424867 0.7062601945279156 0.5805838562775456 0.31085924706746826 0.1474594286204489 0.08013178524425077 0.042533473138786276 0.016258572973933634 0.0026582731305247356 -0.001158501545748706; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.022892478909859647 0.0023697760090033958 0.0011007577708938407 0.002584521194960699 0.0030969212600300607 0.004410267666677376 0.022371509909891313 0.10714098658038877 0.2757692173559496 0.502405351604152 0.8235225019536191 0.36736114393627195 0.6945261457019747 0.633166227540676 0.4145642553822779 0.2505504523071092 0.13333221206983786 0.056190000815485766 0.020699620940311133 0.011351724184364982; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.07722264838616684 0.007678080812427322 0.002441426887401083 0.003132752262957859 0.00211570563377705 0.0019321566964090825 0.00838541167318049 0.03973795746117448 0.10336383264745143 0.21299236360016544 0.4745215009836339 0.8360581361694419 0.30635505201548036 0.6278836465462113 0.6260839641262829 0.432297246434454 0.2129428573789585 0.06541212281434113 0.007832072676535018 0.0010158152882163787; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.18355100403304495 0.018551114222928163 0.0042932234352849865 0.003175046107256799 0.001265730515002695 0.0007593391231002434 0.0027665486661819136 0.0125298627084531 0.031832768362901304 0.07153772897193203 0.2087896398075921 0.5168887092493083 0.8589770427307357 0.23369189187443276 0.4641600278279308 0.3977958843040484 0.1770418941986435 0.0201386117240143 -0.023997278499506676 -0.011008422860733032; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.3640983592210385 0.04646681741096504 0.009639235187198421 0.004817276006345843 0.0012969793678462912 0.0005420236423176474 0.0015214853845539017 0.005749470028128534 0.012507605740863365 0.02686885974611016 0.09121296058586341 0.28837043157183406 0.6112228766262512 0.898600097313266 0.17734729330946938 0.3400667334468346 0.26416928044317645 0.09630168457481325 0.008204113758131489 0.006316656140081002; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.6199109158644978 0.12785110849877301 0.0313016033194421 0.013512445176468367 0.0030454497017880244 0.000995039843827892 0.0019898941780036768 0.0053977733356160625 0.00867092140634876 0.015157670413295559 0.05063472634110581 0.1762241356436839 0.4159432921873005 0.6877850515618205 0.9024459189722173 0.1603834860650871 0.3331019163945191 0.3223371559488959 0.21134352697337372 0.12932638497535345; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.8186732466460539 0.2995149773055846 0.09953610541987093 0.04326884775896206 0.009380841819457907 0.002620176651384114 0.0036905484072053086 0.006814855518852964 0.007655070799899583 0.010140694804435305 0.030366960616738655 0.10595750814865211 0.2551910422223235 0.4394023015342273 0.6506113657817605 0.8879425249189821 0.16816779347153002 0.36939848615623516 0.3955543743935732 0.2958120235184972; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.8396227192772323 0.5377384272575988 0.24542730064488594 0.11087908607925101 0.02385610690022857 0.005855318582942604 0.005911830722814398 0.0075125422263591516 0.005954511130172609 0.005983219455595029 0.015851030486296637 0.05437242368924769 0.13106040358856036 0.23071302988977752 0.37937076513495754 0.6305669593690366 0.8940230424288751 0.1173125572846646 0.26529840840496527 0.30763188074577485; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.6945434625333355 0.7564489670068485 0.4699536601953634 0.22302927293610522 0.048220172241299014 0.010570748236570933 0.007813063457694848 0.006971538133290922 0.003971233226908686 0.0030637260343795185 0.007180966444978327 0.024047893578296457 0.05757403544951748 0.10277901200912463 0.18568307480338322 0.37110521294126425 0.6540400295482298 0.9044131820674947 0.07192846648473486 0.17622816379521533; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.4762936770117058 0.8288181504792247 0.7073369448916661 0.3785043436866993 0.08842076163287693 0.018587147860851035 0.010674319410965838 0.007004876779684728 0.002986718663718019 0.0018010448274263843 0.0036477879716724443 0.011407734191442288 0.02593813839192918 0.04494698994463848 0.08546074992258068 0.19788295159672964 0.4206024822320643 0.6998208549865903 0.9229216765426319 0.048090751793913755], 'U', 0), x = Tuple{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64}[([2.0, 0.0], 1), ([1.872249308489606, 1.1781761209770223], 1), ([1.2054087302990313, 1.8170664239165057], 1), ([0.19274924685910425, 1.8496886378770663], 1), ([-0.7634822105398524, 1.7873921333388556], 1), ([-1.4910744391582855, 1.478876478004551], 1), ([-1.7154967304737785, 0.7638635647212483], 1), ([-1.6927384268631536, -0.025482813230253254], 1), ([-1.6375083041769367, -0.7603351500404292], 1), ([-1.4020967696254747, -1.333548951345314], 1), ([-0.8766694245869815, -1.5673446115478238], 1), ([-0.25353811203451904, -1.5733593633085305], 1), ([0.344106067629918, -1.5427703228082779], 1), ([0.8906186129809912, -1.4696252366116351], 1), ([1.285393995831459, -1.2288208653913129], 1), ([1.443665197475394, -0.8042702146741737], 1), ([1.452484945443323, -0.31680869147896945], 1), ([1.4296700683248307, 0.15597766683284076], 1), ([1.3954544059625245, 0.6029309248483916], 1), ([1.289345432053107, 0.9891467929621599], 1), ([2.0, 0.0], 2), ([1.872249308489606, 1.1781761209770223], 2), ([1.2054087302990313, 1.8170664239165057], 2), ([0.19274924685910425, 1.8496886378770663], 2), ([-0.7634822105398524, 1.7873921333388556], 2), ([-1.4910744391582855, 1.478876478004551], 2), ([-1.7154967304737785, 0.7638635647212483], 2), ([-1.6927384268631536, -0.025482813230253254], 2), ([-1.6375083041769367, -0.7603351500404292], 2), ([-1.4020967696254747, -1.333548951345314], 2), ([-0.8766694245869815, -1.5673446115478238], 2), ([-0.25353811203451904, -1.5733593633085305], 2), ([0.344106067629918, -1.5427703228082779], 2), ([0.8906186129809912, -1.4696252366116351], 2), ([1.285393995831459, -1.2288208653913129], 2), ([1.443665197475394, -0.8042702146741737], 2), ([1.452484945443323, -0.31680869147896945], 2), ([1.4296700683248307, 0.15597766683284076], 2), ([1.3954544059625245, 0.6029309248483916], 2), ([1.289345432053107, 0.9891467929621599], 2)], δ = [-0.04371130303234501, -0.31048224188536255, -0.967988581738815, -0.9981745514807886, -0.9925640431919466, -0.6641107189452709, -0.034397323667447376, 0.04557885467232294, 0.15311894750590507, 0.6867685282184496, 0.9917569390408382, 0.9987719487834845, 0.9983253771900078, 0.9627106802927389, 0.6271295191027246, 0.11581089283061405, -0.03217748499738198, -0.062444176348114715, -0.10704663953685675, -0.5416232140818269, 0.9990442042208214, 0.9505791800128167, 0.2509942342430949, -0.06039507244905279, -0.12172353988631636, -0.7476342374329814, -0.9994082369705168, -0.9989607439768389, -0.9882077655608076, -0.7268761852259742, -0.12813342212064405, 0.04954386261930529, 0.05784843350021442, 0.2705330775529899, 0.7789149929677728, 0.9932712807193089, 0.9994821706560069, 0.9980484581623307, 0.9942540002252274, 0.8406213737275964]))","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"and optimize","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"loss, buildgppost = gp_negloglikelihood(fin_gpmodel, u_mo, y)\n\np0 = log.(ones(2))\nunfl(x) = exp.(x)\noptp = gp_train(loss ∘ unfl, p0)\noptparams = unfl(optp)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"2-element Vector{Float64}:\n 0.6598988631139324\n 1.3490213440119543","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"We build a posterior GP with the optimized parameters,","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"optpost = buildgppost(optparams)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"and incorporate into a GP ode model. Unfortunately, this does not currently match the previous implementation.","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"gpode = GPODE(optpost, tspan)\ngpsol = gpode(u0)\n\nplot(gpsol)","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"(Image: )","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"","category":"page"},{"location":"examples/spiral/","page":"Spiral ODE","title":"Spiral ODE","text":"This page was generated using Literate.jl.","category":"page"}]
}
